function edge_picture(picture,initialization,INF,noise,sigma)


function [conv]=convol2(M,V)
    //calculation of the convolution product of two matrices
    conv=V(1,1)*M(3,3)+V(1,2)*M(3,2)+V(1,3)*M(3,1)+V(2,1)*M(2,3)+V(2,2)*M(2,2)+V(2,3)*M(2,1)+V(3,1)*M(1,3)+V(3,2)*M(1,2)+V(3,3)*M(1,1)
endfunction

function [calculation_speed]=speed(t1,t2,t3,t4,t5,t6,t7,t8,t9)
    //calculation of the speed in one point of the picture
    Gx=[1,0,-1;2,0,-2;1,0,-1];
    Gy=[1,2,1;0,0,0;-1,-2,-1];
    V=[t1,t2,t3;t4,t5,t6;t7,t8,t9]
    dx=convol2(Gx,V)
    dy=convol2(Gy,V)
    calculation_speed = exp(-(dx^2+dy^2)/(2*sigma^2))
endfunction

function [calculation_time]=time(t1,t2,t3,t4,v)
    //calculation of T in one point in space
    if max(min(t1,t2),min(t3,t4))-min(min(t1,t2),min(t3,t4))<1/v then
        calculation_time=(min(t1,t2)+min(t3,t4))/2+sqrt(2/(v^2)-(min(t1,t2)-min(t3,t4))^2)/2;
    else
        calculation_time=min(min(t1,t2),min(t3,t4))+1/v;
    end
endfunction

function [Stack,T,TAB]=insertion_neighborhood(Head,Stack,T,TAB)
    //calculation of T on the neighborhood of a point where T has already been calculated
    c=1    
    TXY=[Head(1)+1,Head(1)-1,Head(1),Head(1);Head(2),Head(2),Head(2)+1,Head(2)-1]

    while(c<=4)
        i=TXY(1,c)
        j=TXY(2,c)
        if TAB(i,j)==0 then
            v=speed(picture(i-1,j-1),picture(i-1,j),picture(i-1,j+1),picture(i,j-1),picture(i,j),picture(i,j+1),picture(i+1,j-1),picture(i+1,j),picture(i+1,j+1))
            t=time(T(i-1,j),T(i+1,j),T(i,j-1),T(i,j+1),v)
            TAB(i,j)=-1;
            T(i,j)=t
            Stack(size(Stack)+1)=list(i,j,t)
            n=size(Stack)
            while n>1
                if Stack(n)(3)<Stack(n-1)(3) then
                    temp=Stack(n-1)
                    Stack(n-1)=Stack(n)
                    Stack(n)=temp
                    n=n-1
                else
                    break
                end
            end
        end
        c=c+1
    end 
endfunction

//initialization of the picthre (Gaussian filter is applied)
    picture=im2double(picture)
    size_mesh=size(picture)
    filter=fspecial('gaussian',[size_mesh(1),size_mesh(2)],noise)
    picture=imfilter(picture,filter)
    
//initialization of the Fast Marching Method / Level Set Method
    TAB=zeros(size_mesh(1),size_mesh(2));
    TAB(initialization(1),initialization(2))=1
    T=10^6*ones(TAB)
    T(initialization(1),initialization(2))=0
    Stack=list();
    Stack(1)=list(initialization(1),initialization(2),0);
    Head=list()
    
//Main loop
    while (size(Stack)<>0 & Stack(1)(3)<INF)        
        TAB(Stack(1)(1),Stack(1)(2))=1;
        [Stack,T,TAB]=insertion_neighborhood(list(Stack(1)(1),Stack(1)(2)),Stack,T,TAB);
        Stack(1)=null()
    end

//Display of the edge
    xset("fpf",string=" ")
    contour2d(1:size_mesh(2),size_mesh(1):-1:1,T',[0,INF],frameflag=4,box=0)

endfunction


//Application of the software to an IRM
picture=imread('C:\im_segmentation\femur_patient.jpg');
size_mesh=size(picture)
tic()
edge_picture(picture,list(size_mesh(1)+1-275,210),130,3,0.1);
disp('time d execution :'+string(toc()))
